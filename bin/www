#!/usr/bin/env node

/**
 * Module dependencies.
 */
const fs = require('fs');
require('dotenv').config();
var app = require('../app');
var debug = require('debug')('backend-project-2:server');
const http = require('http');
const https = require('https');
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let server;

if (process.env.ENV === "production") {
  server = http.createServer(app);
}
else if (process.env.ENV === "development") {
  server = https.createServer({
    key: fs.readFileSync('./certs/tls.key'),
    cert: fs.readFileSync('./certs/tls.cert')
  }, app);
}

// Realtime
const io = new Server(server);
io.on('connection', (socket) => {
  let userID, conversationIDList, friendIDList, userData;

  socket.on('user enter page', (user) => {
    userData = user;
    userID = user._id;
    friendIDList = user.friends.map(friend => friend._id);
    conversationIDList = user.conversations.map(conversation => conversation._id);
    socket.join([...conversationIDList, ...friendIDList, user._id]);
    socket.to(friendIDList)
          .emit(`your friend is online`, user);
  })

  socket.on(`send your status to friends`, (friend) => {
    socket.to(friendIDList).emit("user receive friend status", friend);
  })

  socket.on('send chatLine to server', (chatLine) => {
    socket.to(chatLine.conversationID).emit(`conversation receive chatLine`, chatLine);
  })  

  socket.on('disconnect', () => {
    socket.to(friendIDList).emit("your friend has been offline", userData);
  });
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server is listening on ${port} ...`)
}
